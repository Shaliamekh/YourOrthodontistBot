from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from app.utils.db import get_clinics



class ChoosingClinic(StatesGroup):
    waiting_for_clinic = State()


cmd_line = '\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.'


async def all_clinics_info(message: types.Message, state: FSMContext):
    await state.finish()
    clinics = get_clinics()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for clinic in clinics:
        keyboard.add(clinic)
    await message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–ª–∏–Ω–∏–∫ –≤ –º–µ–Ω—é ‚¨á' + cmd_line,
                         reply_markup=keyboard)
    await ChoosingClinic.waiting_for_clinic.set()


async def clinic_chosen(message: types.Message):
    clinics = get_clinics()
    if message.text not in clinics.keys():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨á" + cmd_line)
        return
    await message.answer(message.text + '\n<i>–¢—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–Ω–∏–∫–∞—Ö</i> –º')
    await message.answer_location(clinics[message.text]['location'][0], clinics[message.text]['location'][1])
    await message.answer(cmd_line)

def register_handlers_clinics(dp: Dispatcher):
    dp.register_message_handler(all_clinics_info, Text(equals='–í—Å–µ –∫–ª–∏–Ω–∏–∫–∏ üè•'))
    dp.register_message_handler(clinic_chosen, state=ChoosingClinic.waiting_for_clinic)