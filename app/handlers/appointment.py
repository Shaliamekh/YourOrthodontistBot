import re
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from app.utils.db import get_clinics
from app.utils.sender import appointment_sender


class MakeAppointment(StatesGroup):
    waiting_for_clinic = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_problem = State()


cmd_line = '\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /appointment.\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.'


# TODO:  –º–µ—Ö–∞–∏–∑–º –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø–∏—Å–∞–ª—Å—è –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–∏–µ–º
async def make_appointment(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    clinics = get_clinics()
    for name in clinics.keys():
        keyboard.add(name)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –∫–ª–∏–Ω–∏–∫—É ‚¨á" + cmd_line, reply_markup=keyboard)
    await MakeAppointment.waiting_for_clinic.set()


async def clinic_chosen(message: types.Message, state: FSMContext):
    clinics = get_clinics()
    if message.text not in clinics.keys():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨á" + cmd_line)
        return
    await state.update_data(clinic=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for date in clinics[message.text]['dates_available'].keys():
        keyboard.add(date)
    await MakeAppointment.waiting_for_date.set()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É  ‚¨á" + cmd_line, reply_markup=keyboard)


async def date_chosen(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    clinics = get_clinics()
    if message.text not in clinics[user_data['clinic']]['dates_available'].keys():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨á" + cmd_line)
        return
    await state.update_data(date=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for time in clinics[user_data['clinic']]['dates_available'][message.text]:
        keyboard.add(time)
    await MakeAppointment.waiting_for_time.set()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è  ‚¨á" + cmd_line, reply_markup=keyboard)


async def time_chosen(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    clinics = get_clinics()
    if message.text not in clinics[user_data['clinic']]['dates_available'][user_data['date']]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨á" + cmd_line)
        return
    await state.update_data(time=message.text)
    await MakeAppointment.waiting_for_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è ‚¨á" + cmd_line, reply_markup=types.ReplyKeyboardRemove())


async def name_shared(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    await MakeAppointment.waiting_for_phone.set()
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ —Å –í–∞–º–∏. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX "
                         "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å  –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É ‚¨á" + cmd_line,
                         reply_markup=keyboard)


async def phone_shared(message: types.Message, state: FSMContext):
    print(await state.get_state())
    if not message.contact:
        if not re.match(r'^\+[\d]{11}$', message.text):
            await message.answer('–ù–µ–ø–æ—Ö–æ–∂–µ, —á—Ç–æ —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' + cmd_line)
            return
        await state.update_data(phone_number=message.text)
    else:
        print(message.contact)
        await state.update_data(phone_number='+' + message.contact.phone_number)
    await MakeAppointment.waiting_for_problem.set()
    await message.answer('–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É  ‚¨á' + cmd_line, reply_markup=types.ReplyKeyboardRemove())


async def problem_described(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    user_data = await state.get_data()
    await state.finish()
    subject = "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ Telegram-Bot"
    msg_to_email = f"""
{user_data['name']} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ø—Ä–∏–µ–º –≤ –∫–ª–∏–Ω–∏–∫—É {user_data['clinic']}
–î–∞—Ç–∞: {user_data['date']}
–í—Ä–µ–º—è: {user_data['time']}
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number']}
–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {user_data['problem']}
"""
    if await appointment_sender(subject, msg_to_email):
        msg_to_user = f'–£–≤–∞–∂–∞–µ–º—ã–π(-–∞—è) {user_data["name"]}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º, ' \
                      f'–∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è {user_data["date"]} –≤ {user_data["time"]} –≤ –∫–ª–∏–Ω–∏–∫–µ {user_data["clinic"]}.' \
                      f'\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.'
    else:
        msg_to_user = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /appointment." \
                      "\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu."

    await message.answer(msg_to_user)


def register_handlers_appointment(dp: Dispatcher):
    dp.register_message_handler(make_appointment, Text(equals='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º üìÖ'), state='*')
    dp.register_message_handler(make_appointment, commands=['appointment'], state='*')
    dp.register_message_handler(clinic_chosen, state=MakeAppointment.waiting_for_clinic)
    dp.register_message_handler(date_chosen, state=MakeAppointment.waiting_for_date)
    dp.register_message_handler(time_chosen, state=MakeAppointment.waiting_for_time)
    dp.register_message_handler(name_shared, state=MakeAppointment.waiting_for_name)
    dp.register_message_handler(phone_shared, state=MakeAppointment.waiting_for_phone)
    dp.register_message_handler(phone_shared, content_types=['contact'], state=MakeAppointment.waiting_for_phone)
    dp.register_message_handler(problem_described, state=MakeAppointment.waiting_for_problem)
